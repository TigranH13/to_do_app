// Mocks generated by Mockito 5.4.2 from annotations
// in to_do_app/test/todo_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:isar/isar.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:to_do_app/data/repository/todos_impl_wtih_isr.dart' as _i3;
import 'package:to_do_app/domain/models/task.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeIsar_0 extends _i1.SmartFake implements _i2.Isar {
  _FakeIsar_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TodosRepositoryImplWithIsr].
///
/// See the documentation for Mockito's code generation for more information.
class MockTodosRepositoryImplWithIsr extends _i1.Mock
    implements _i3.TodosRepositoryImplWithIsr {
  @override
  _i4.Future<_i2.Isar> get db => (super.noSuchMethod(
        Invocation.getter(#db),
        returnValue: _i4.Future<_i2.Isar>.value(_FakeIsar_0(
          this,
          Invocation.getter(#db),
        )),
        returnValueForMissingStub: _i4.Future<_i2.Isar>.value(_FakeIsar_0(
          this,
          Invocation.getter(#db),
        )),
      ) as _i4.Future<_i2.Isar>);

  @override
  set db(_i4.Future<_i2.Isar>? _db) => super.noSuchMethod(
        Invocation.setter(
          #db,
          _db,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> deleteTask({required _i5.Task? task}) => (super.noSuchMethod(
        Invocation.method(
          #deleteTask,
          [],
          {#task: task},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> saveTask({required _i5.Task? task}) => (super.noSuchMethod(
        Invocation.method(
          #saveTask,
          [],
          {#task: task},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i5.Task>> loadTasks() => (super.noSuchMethod(
        Invocation.method(
          #loadTasks,
          [],
        ),
        returnValue: _i4.Future<List<_i5.Task>>.value(<_i5.Task>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i5.Task>>.value(<_i5.Task>[]),
      ) as _i4.Future<List<_i5.Task>>);

  @override
  _i4.Future<void> editTask({required _i5.Task? task}) => (super.noSuchMethod(
        Invocation.method(
          #editTask,
          [],
          {#task: task},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
